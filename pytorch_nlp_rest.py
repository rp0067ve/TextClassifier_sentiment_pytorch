# -*- coding: utf-8 -*-
"""pytorch_nlp_rest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-M6qqFm_8M-8q8EzmXWoYl5c38Ydrj6a
"""

from flask import Flask, request
import pickle
import numpy as np
import torch
import torch.nn as nn
from torch.nn import functional as F
import pandas as pd
import numpy as np

!ls



input_size=467
output_size=2
hidden_size=500

class Net(nn.Module):
   def __init__(self):
       super(Net, self).__init__()
       self.fc1 = torch.nn.Linear(input_size, hidden_size)
       self.fc2 = torch.nn.Linear(hidden_size, hidden_size)
       self.fc3 = torch.nn.Linear(hidden_size, output_size)


   def forward(self, X):
       X = torch.relu((self.fc1(X)))
       X = torch.relu((self.fc2(X)))
       X = self.fc3(X)

       return F.log_softmax(X,dim=1)

model = Net()

!ls

model.load_state_dict(torch.load('text_classifier_pytorch'))

!pip install flask-ngrok

from flask_ngrok import run_with_ngrok

app = Flask(__name__)

run_with_ngrok(app)

!ls

with open('tfidfmodel.pickle','rb') as file:
    tfidf = pickle.load(file)

@app.route('/predict',methods=['POST'])
def customer_behavior():
    request_data = request.get_json(force=True)
    text = request_data['sentence']
    print("printing the sentence")
    print(text)
    text_list=[]
    text_list.append(text)
    print(text_list)
    numeric_text = tfidf.transform(text_list).toarray()
    output = model(torch.from_numpy(numeric_text).float())
    print("Printing predictions")
    print(output[:,0][0])
    print(output[:,1][0])
    sentiment="unknown"
    if torch.gt(output[:,0][0],output[:,1][0]):
      print("negative prediction")
      sentiment="negative"
    else:
      print("positive")
      sentiment="positive prediction"
    print("Printing prediction")     
    print(sentiment)
    return "The prediction is {}".format(sentiment)

app.run()

